import { GetStaticProps } from "next";
import Head from "next/head";
import { SubscribeButton } from "../components/SubscribeButton";
import { stripe } from "../services/stripe";
import styles from "./home.module.scss";

/**
 * FORMAS CHAMADAS HTTP
 * Client-Side - Outros casos algo que √© carregado a uma a√ß√£o do usu√°rio, informa√ß√µes que n√£o necessitam serem pre recarregados
 * Server-Side - Indexa√ßao, dados din√¢micos, sess√£o do usu√°rio , informa√ß√µes em tempo real do usu√°rio contexto...
 * Static Site Generation - Indexa√ßao, Performance, salvar conte√∫do est√°tico (que √© o mesmo para todos os usu√°rios)
 *
 * Post Blog
 *
 * Conte√∫do (SSG)
 * Coment√°rio (Client-Side)
 */

interface HomeProps {
  product: {
    priceId: string;
    amount: string;
  };
}

export default function Home({ product }: HomeProps) {
  return (
    <>
      <Head>
        <title>Home | Ignews</title>
      </Head>
      <main className={styles.contentContainer}>
        <section className={styles.hero}>
          <span>üëè Hey, welcome</span>
          <h1>
            News about the <span>React</span> world.
          </h1>
          <p>
            Get access to all publications <br />
            <span>for {product.amount} month</span>
          </p>
          <SubscribeButton />
        </section>
        <img src="/images/avatar.svg" alt="Girl coding" />
      </main>
    </>
  );
}

/**
 * Fun√ß√µes executadas no next
 * getServerSideProps -> SSR
 * getStaticProps -> SSG
 */

export const getStaticProps: GetStaticProps = async () => {
  const price = await stripe.prices.retrieve("price_1KLcptKxIhwMYggjWlM6wWN9");
  /**
   * Como segundo par√¢metro do retrive pode se passar {expand: ["product"]}
   * Nesse caso al√©m de recuperar o pre√ßo pegaria os outros dados do produto
   */

  const product = {
    priceId: price.id,
    amount: new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price.unit_amount / 100),
  };

  return {
    props: {
      product,
    },
    revalidate: 60 * 60 * 24, // 24 horas (informar em minutos)
  };
};
